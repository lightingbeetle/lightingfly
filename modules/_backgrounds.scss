// ---------------------------------------------
// BACKGROUNDS
// ---------------------------------------------

@mixin linear-gradient(
  $direction, 
  $colors...){
  
    $w3c: '';

    @if type-of($direction) == number and $direction < 0 {
      $w3c: 180 + $direction;
    } @else {
      $w3c: $direction;
    }

    @if type-of($direction) != number {
      $direction: _fix-direction($direction);
    }

    background-image:  -webkit-linear-gradient($direction, $colors);
    background-image:          linear-gradient($w3c, $colors);
}

@mixin radial-gradient(
  $sizeShapePos,
  $colors...) {
    
    $posSizeShape: ();
    $atIndex: false;
    
    // reordering for older browsers
    @if length($sizeShapePos) > 1 {
      $atIndex: index($sizeShapePos, 'at');
      @if $atIndex == null {
        $atIndex: false;
      }
    }   
    @if $atIndex != false {
      @for $i from ($atIndex + 1) through length($sizeShapePos) {
        $posSizeShape: append($posSizeShape, nth($sizeShapePos, $i));
      }
      $posSizeShape: append($posSizeShape, unquote(','));
      @for $i from 1 through ($atIndex - 1) {
        $posSizeShape: append($posSizeShape, nth($sizeShapePos, $i));
      }
    } @else {
      $posSizeShape: append($posSizeShape, $sizeShapePos);
    }

    background-image:  -webkit-radial-gradient($posSizeShape, $colors);
    background-image:          radial-gradient($sizeShapePos, $colors);
}

@mixin background-color(
  $color...){
    background: nth($color,1);
    background: nth($color,2);
}

@mixin background-image(
  $images...){

  $prefixedImages: ();
  $containsGradient: false;
  $loop: 1;
  
  // test if gradient is there
  @each $image in $images {
    @if length($image) == 2 { $loop: 2; }
  }

  // if is gradient loop 5 times (for each prefix)
  @for $i from 1 through $loop {

    @each $image in $images {
      // if is gradient use prefixed gradient
      @if length($image) == 2 {
        $prefixedImages: join($prefixedImages, nth($image, $i), comma);
      } 
      // if is image use just url
      @else {
        $prefixedImages: join($prefixedImages, $image, comma);
      }
    }

    // output prefixed version of images
    background-image: $prefixedImages;
    // clean
    $prefixedImages: ();
  }
}

@mixin background-size(
  $arguments...){
    -webkit-background-size: $arguments;
            background-size: $arguments;   
}

@mixin background-clip(
  $arguments...){
    -webkit-background-clip: $arguments;
            background-clip: $arguments;
}

@mixin background-origin(
  $arguments...){
    -webkit-background-origin: $arguments;
            background-origin: $arguments;
}

// function for reverting direction beacuse of old speficification for linear gradient
@function _fix-direction(
  $direction){

    $fixedDirection: ();
    
    @each $value in $direction {
      @if $value != 'to' {
        @if $value == 'top' { $value: bottom; }
        @else if $value == 'right' { $value: left; }
        @else if $value == 'bottom' { $value: top; }
        @else if $value == 'left' { $value: right; }
        $fixedDirection: append($fixedDirection, $value, space);
      }
    }
    
    @return $fixedDirection;
}

// function to generating linear gradient in background-image mixin
@function _linear-gradient(
  $direction, 
  $colors...){
  
    $w3c: '';

    @if type-of($direction) == number and $direction < 0 {
      $w3c: 180 + $direction;
    } @else {
      $w3c: $direction;
    }

    @if type-of($direction) != number {
      $direction: _fix-direction($direction);
    }

    $prefixes: ();

    $prefixes: join($prefixes, (-webkit-linear-gradient($direction, $colors)), space);
    $prefixes: join($prefixes,         (linear-gradient($w3c, $colors)), space);
    
    @return $prefixes;
}

// function to generating linear gradient in background-image mixin
@function _radial-gradient(
  $sizeShapePos,
  $colors...) {
    
    $posSizeShape: ();
    $atIndex: false;
    
    // reordering for older browsers
    @if length($sizeShapePos) > 1 {
      $atIndex: index($sizeShapePos, 'at');
      @if $atIndex == null {
        $atIndex: false;
      }
    }   
    @if $atIndex != false {
      @for $i from ($atIndex + 1) through length($sizeShapePos) {
        $posSizeShape: append($posSizeShape, nth($sizeShapePos, $i));
      }
      $posSizeShape: append($posSizeShape, unquote(','));
      @for $i from 1 through ($atIndex - 1) {
        $posSizeShape: append($posSizeShape, nth($sizeShapePos, $i));
      }
    } @else {
      $posSizeShape: append($posSizeShape, $sizeShapePos);
    }
  
    $prefixes: ();

    $prefixes: join($prefixes, (-webkit-radial-gradient($posSizeShape, $colors)), space);
    $prefixes: join($prefixes,         (radial-gradient($sizeShapePos, $colors)), space);
    
    @return $prefixes;
}